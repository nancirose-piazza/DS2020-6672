import pickle
import numpy as np
import gym
np.random.seed(123) # set a random seed when setting up the gym environment (train_test_split)
import gym_malware
import os
import keras

from keras.models import Sequential
from keras.layers import Dense, Activation, Flatten, ELU, Dropout, BatchNormalization
from keras.optimizers import Adam, SGD, RMSprop

# pip install keras-rl
from rl.agents.dqn import DQNAgent
from rl.agents.sarsa import SarsaAgent
from rl.policy import BoltzmannQPolicy
from rl.memory import SequentialMemory


### Take the last item from each folder and construct a model.

def generate_dense_model(input_shape, layers, nb_actions):
    model = Sequential()
    model.add(Flatten(input_shape=input_shape))
    model.add(Dropout(0.1))  # drop out the input to make model less sensitive to any 1 feature

    for layer in layers:
        model.add(Dense(layer))
        model.add(BatchNormalization())
        model.add(ELU(alpha=1.0))

    model.add(Dense(nb_actions))
    model.add(Activation('linear'))

    savepoint = "gym-malware-master/savepoint"

    latest_weight = sorted( list(os.listdir(savepoint+"/weights")) )[-1]
    model.load_weights(savepoint+"/weights/"+latest_weight)
    print(model.summary())

    return model


def train_dqn_model(layers, rounds=10000, run_test=False, use_score=False):
    ENV_NAME = 'malware-score-v0' if use_score else 'malware-v0'
    env = gym.make(ENV_NAME)
    env.seed(123)
    nb_actions = env.action_space.n
    window_length = 1  # "experience" consists of where we were, where we are now



    savepoint = "gym-malware-master/savepoint"
    model = generate_dense_model((window_length,) + env.observation_space.shape, layers, nb_actions)
    
    history_saves = sorted (list( os.listdir(savepoint+"/pickle_train")))[-1]
    history_saves = savepoint+"/pickle_train/"+history_saves
    with open(history_saves, 'rb') as f:
      env.history = pickle.load(f)
      f.close()

    policy_dir = sorted( list(os.listdir(savepoint+"/policy") ) )[-1]
    policy_dir = savepoint+"/policy/"+policy_dir
    policy = BoltzmannQPolicy()
    with open(policy_dir,'rb') as f:
      tmp_policy = pickle.load(f)
      policy.tau = tmp_policy['tau']
      policy.clip = tmp_policy['clip']
      f.close()

    memory_dir = sorted( list(os.listdir(savepoint+"/memory") ) )[-1]
    memory_dir = savepoint+"/memory/"+memory_dir
    with open(memory_dir,'rb') as f:
      memory = pickle.load(f)
      f.close()


    # DQN agent as described in Mnih (2013) and Mnih (2015).
    # http://arxiv.org/pdf/1312.5602.pdf
    # http://arxiv.org/abs/1509.06461
    agent = DQNAgent(model=model, nb_actions=nb_actions, memory=memory, nb_steps_warmup=16,
                     enable_double_dqn=True, enable_dueling_network=True, dueling_type='avg',
                     target_model_update=1e-2, policy=policy, batch_size=16)

    # keras-rl allows one to use and built-in keras optimizer
    agent.compile(RMSprop(lr=1e-3), metrics=['mae'])

    return agent, model


if __name__ == '__main__':
    savepoint = "gym-malware-master/savepoint"

    agent2, model2 = train_dqn_model([1024, 256], rounds=10000, run_test=True, use_score=True)  # allow agent to see scores


    modelnum = len ( list ( os.listdir(savepoint +"/models")))
    model2.save(savepoint +"/models/dqn_score"+str(modelnum).zfill(3) +'.h5', overwrite=True)
    